package csci333;

public class Main {
    public static void main(String[] args) {
        // Create a ChainedHashTable instance with an initial capacity of 16 elements
        ChainedHashTable<Integer> hashTable = new ChainedHashTable<>(16);

        // Test inserting multiple elements
        System.out.println("Inserting multiple elements:");
        int[] elementsToInsert = {15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165};
        for (int element : elementsToInsert) {
            hashTable.insert(element);
        }
        System.out.println(hashTable);

        // Test searching for a few existing elements
        System.out.println("Searching for existing elements 25 and 105:");
        System.out.println("Element 25 found: " + (hashTable.search(25) != null));
        System.out.println("Element 105 found: " + (hashTable.search(105) != null));

        // Test searching for a non-existing element
        System.out.println("Searching for non-existent element 200:");
        System.out.println("Element 200 found: " + (hashTable.search(200) != null));

        // Test deleting an element that exists in the hash table
        System.out.println("Deleting element 35:");
        hashTable.delete(35);
        System.out.println(hashTable);

        // Test deleting a non-existent element
        System.out.println("Deleting non-existent element 200:");
        hashTable.delete(200);
        System.out.println(hashTable);

        // Insert more elements to observe chaining behavior
        System.out.println("Inserting additional elements to create more collisions:");
        int[] additionalElements = {175, 185, 195, 205, 215, 225, 235, 245, 255, 265};
        for (int element : additionalElements) {
            hashTable.insert(element);
        }
        System.out.println(hashTable);

        // Final state of the hash table
        System.out.println("Final state of the hash table:");
        System.out.println(hashTable);
    }
}
