package csci333;

public class Quicksort<T extends Comparable<T>> {
	private T[] array;
	
	public Quicksort(T[] array) {
		this.array = array;	
	}
	
	private int partition(int start, int end) {
		T pivot_value = array[end];
		int i = start - 1;
		for (int j = start; j < end; j++) {
			if (array[j].compareTo(pivot_value) <= 0) {
				i++;
				swap(i, j);
			}
		}
		swap(i + 1, end);
		return i + 1;
	}
	
	private void quicksortNaive(int start, int end) {
		
	}
	
	public void quicksortNaive() {
		
	}
	
	private void quicksortBestOfThree(int start, int end) {
		
	}
	
	public void quicksortBestOfThree() {
		
	}
	
	private void quicksortRandomized(int start, int end) {
		
	}
	
	public void quicksortRandomized() {
		
	}
	
	private void swap(int first, int second) {
		T temp = array[first];
		array[first] = array[second];
		array[second] = temp;
	}
}
