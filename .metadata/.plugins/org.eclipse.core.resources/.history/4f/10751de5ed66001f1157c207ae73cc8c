package homework1;

/**
 * Caleb Knapp 08-28 CSCI-333 Homework 1
 * This is a simple trinary search implementation
 */

public class TrinarySearch {

	public static void main(String[] args) {
		// Dummy array to search
		int[] searchArray = {1, 3, 5, 7, 9, 13, 23, 27, 30, 32};
		int searchTerm = 50;
		// Getting returned array index (-1 means not found)
		int returned = trinarySearch(searchTerm, searchArray, 0, searchArray.length - 1);
		// If returned < 0 then it's not in the array
		if (returned < 0) {
			System.out.println(searchTerm + " is not in the array.");
		} else {
			System.out.println("Found " + searchTerm + " at position " + returned + " searchArray[" + returned + "] = " + searchArray[returned]);
		}
	}
	
	/**
	 * A method for searching an array by splitting it into three segments and recursing on the third of best fit
	 * @param target The number to look for
	 * @param array The array to look through
	 * @param start The index to start looking from
	 * @param end The index to stop looking at
	 * @return An integer index representing the target integer's location. -1 means it was not found.
	 */
	public static int trinarySearch(int target, int[] array, int start, int end) {
		// Calculating the length of the array to search
		int length = (end - start) + 1;
		// If array is less than 3 indexes long, check the beginning and end indexes (could be the same)
		if (length < 3) {
			if (array[start] == target) {
				return start;
			}
			if (array[end] == target) {
				return end;
			}
			return -1;
		}
		
		// calculating length of a third of the array
		int third = length / 3;
		// Calculating the first index
		int index1 = start + third - 1;
		// Calculating the second index
		int index2 = index1 + third;
		// setting default return index.
		int rtrnindex = -1;
		
		// If the target is less than the first index it's in the first third
		if (target < array[index1]) {
			rtrnindex = trinarySearch(target, array, start, index1 - 1);
		// If less than the second index it's in the second third
		} else if (target < array[index2]) {
			rtrnindex = trinarySearch(target, array, index1, index2 - 1);
		// If it's not in the first or second third, it's in the last third
		} else {
			rtrnindex = trinarySearch(target, array, index2, end);
		}
		
		// Returns index of found item or -1 if not found
		return rtrnindex;
	}

}
