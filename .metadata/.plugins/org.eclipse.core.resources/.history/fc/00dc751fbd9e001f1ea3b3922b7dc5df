package csci333;

public class Main {
    public static void main(String[] args) throws Exception {
        System.out.println("---------------Chained---------------");
    	// Create a ChainedHashTable instance with an initial capacity of 16 elements
        ChainedHashTable<Integer> hashTableChained = new ChainedHashTable<>(16);

        // Test inserting multiple elements
        System.out.println("Inserting multiple elements:");
        int[] elementsToInsert = {15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165};
        for (int element : elementsToInsert) {
            hashTableChained.insert(element);
        }
        System.out.println(hashTableChained);

        // Test searching for a few existing elements
        System.out.println("Searching for existing elements 25 and 105:");
        System.out.println("Element 25 found: " + (hashTableChained.search(25) != null));
        System.out.println("Element 105 found: " + (hashTableChained.search(105) != null));

        // Test searching for a non-existing element
        System.out.println("Searching for non-existent element 200:");
        System.out.println("Element 200 found: " + (hashTableChained.search(200) != null));

        // Test deleting an element that exists in the hash table
        System.out.println("Deleting element 35:");
        hashTableChained.delete(35);
        System.out.println(hashTableChained);

        // Test deleting a non-existent element
        System.out.println("Deleting non-existent element 200:");
        hashTableChained.delete(200);
        System.out.println(hashTableChained);

        // Insert more elements to observe chaining behavior
        System.out.println("Inserting additional elements to create more collisions:");
        int[] additionalElements = {175, 185, 195, 205, 215, 225, 235, 245, 255, 265};
        for (int element : additionalElements) {
            hashTableChained.insert(element);
        }
        System.out.println(hashTableChained);

        // Final state of the hash table
        System.out.println("Final state of the hash table:");
        System.out.println(hashTableChained);
        
        System.out.println("---------------OpenAddress---------------");
        
        try {
            // Create an OpenAddressedHashTable with a capacity of 16 elements
            OpenAddressedHashTable<Integer> hashTableOpenAddress = new OpenAddressedHashTable<>(16);

            // Test inserting multiple elements
            System.out.println("Inserting elements:");
            for (int element : elementsToInsert) {
                hashTableOpenAddress.insert(element);
            }
            System.out.println("Hash table after insertions:");
            System.out.println(hashTableOpenAddress);

            // Test searching for a few existing elements
            System.out.println("Searching for existing elements 25 and 105:");
            System.out.println("Element 25 found: " + (hashTableOpenAddress.search(25) != null));
            System.out.println("Element 105 found: " + (hashTableOpenAddress.search(105) != null));

            // Test searching for a non-existing element
            System.out.println("Searching for non-existent element 200:");
            System.out.println("Element 200 found: " + (hashTableOpenAddress.search(200) != null));

            // Test deleting an existing element
            System.out.println("Deleting element 35:");
            hashTableOpenAddress.delete(35);
            System.out.println("Hash table after deleting element 35:");
            System.out.println(hashTableOpenAddress);

            // Test deleting a non-existent element
            System.out.println("Attempting to delete non-existent element 200:");
            try {
                hashTableOpenAddress.delete(200);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            System.out.println(hashTableOpenAddress);

            // Insert more elements to test for open addressing handling
            System.out.println("Inserting additional elements to fill the table:");
            for (int element : additionalElements) {
                hashTableOpenAddress.insert(element);
            }
            System.out.println("Hash table after additional insertions:");
            System.out.println(hashTableOpenAddress);

            // Final state of the hash table
            System.out.println("Final state of the hash table:");
            System.out.println(hashTableOpenAddress);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
}